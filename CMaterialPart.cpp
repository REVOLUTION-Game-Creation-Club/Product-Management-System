//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : CMaterialPart.cpp
//  @ Date : 2007-04-10
//  @ Author : 
//
//


#include "CMaterialPart.h"
#include "CData.h"

bool CMaterialPart::SaveMaterialData()
{
	FILE* file = NULL;

	if(fopen_s( &file, "Material.txt", "w" ) != 0)
		return false;

	int size = (int)m_materialList.size();
	
	fprintf(file, "%d\n", size );

	vector<CMaterial>::iterator itr;

	for(itr = m_materialList.begin(); itr != m_materialList.end(); itr++)
	{
		CMaterial m = (CMaterial)*itr;
		fprintf(file,"%d\t%s\t%.2f\n",m.m_iMaterialID,m.m_strMaterialType.data(),m.m_fStockAmount);
	}

	fclose(file);


	return true;
}

bool CMaterialPart::SaveOrderData()
{
	FILE* file = NULL;
	if( fopen_s( &file, "Order.txt", "w" ) != 0 )
		return false;

	int size = (int)m_orderList.size();
	fprintf(file,"%d\n",size);

	vector<COrder>::iterator itr;

	for(itr = m_orderList.begin(); itr != m_orderList.end(); itr++)
	{
		COrder o = (COrder)*itr;

		fprintf(file,"%d\t%d\t%.2f\t%s\t%s\t%s\t%d\t%s\n",
			o.m_iOrderID,o.m_iMaterialID,o.m_fOrderAmount,o.m_strCompany.data(),
			o.m_dateOrderDay.data(),o.m_dateDueDay.data(), o.m_bChecked,o.m_dateInputDay.data());
	}

	fclose(file);

	return true;
}

bool CMaterialPart::SaveShipData()
{
	FILE* file = NULL;
	if( fopen_s( &file, "Ship.txt", "w" ) != 0 )
		return false;

	int size = (int)m_shipList.size();
	fprintf(file,"%d\n",size);

	vector<CShip>::iterator itr;

	for(itr = m_shipList.begin(); itr != m_shipList.end(); itr++)
	{
		CShip s = (CShip)*itr;

		fprintf(file,"%d\t%d\t%.2f\t%s\t%d\t%s\n",s.m_iShipID,s.m_iShipID,s.m_fShipAmount,
			s.m_dateShipDay.data(),s.m_bChecked,s.m_dateInputDay.data());
	}

	fclose(file);

	return true;
}

bool CMaterialPart::LoadMaterialData()
{
	FILE* file = NULL;

	if(fopen_s( &file, "Material.txt", "r" ) != 0)
		return false;

	int size;
 	fscanf( file, "%d\n", &size );

	for(int i = 0; i <size; i++)
	{
		int materialID = 0;
		char materialType[20];
		float materialAmount = 0.0f;
		fscanf(file,"%d\t%s\t%f\n",&materialID,materialType,&materialAmount);

		CMaterial temp;
		temp.SetData(materialID,materialType, materialAmount);

		m_materialList.push_back(temp);
	}

	fclose(file);

	return true;
}

bool CMaterialPart::LoadOrderData()
{
	FILE* file = NULL;
	if( fopen_s( &file, "Order.txt", "r" ) != 0 )
		return false;

	int size;
	fscanf(file,"%d\n",&size);

	for(int i = 0; i <size; i++)
	{
		int orderID, materialID;
		float orderAmount;
		int checked;
		char company[20], orderDay[9], dueDay[9], stockDay[9];
		COrder temp;

		fscanf(file,"%d\t%d\t%f\t%s\t%s\t%s\t%d",
			&orderID,&materialID,&orderAmount,company,orderDay,dueDay, &checked);

		if(checked == 1)
		{
			fscanf(file,"\t%s\n",stockDay);
			temp.SetData(orderID,materialID,orderAmount,company,orderDay,dueDay,true,stockDay);
		}
		else
		{
			fscanf(file,"\n");
			temp.SetData(orderID,materialID,orderAmount,company,orderDay,dueDay,false);
		}

		m_orderList.push_back(temp);
	}

	fclose(file);
	
	return true;
}

bool CMaterialPart::LoadShipData()
{
	FILE* file;
	if( fopen_s( &file, "Ship.txt", "r" ) != 0 )
		return false;

	int size;
	fscanf(file,"%d\n",&size);

	for(int i = 0; i <size; i++)
	{
		int shipID, materialID;
		float shipAmount;
		char shipDay[9], inputDay[9];
		int checked;
		CShip temp;

		fscanf(file,"%d\t%d\t%f\t%s\t%d",&shipID,&materialID,&shipAmount,
			shipDay,&checked);

		if(checked == 1)
		{
			fscanf(file,"\t%s\n",inputDay);
			temp.SetData(shipID,materialID,shipAmount,shipDay,true,inputDay);
		}
		else
		{
			fscanf(file,"\n");
			temp.SetData(shipID,materialID,shipAmount,shipDay,false);
		}

		m_shipList.push_back(temp);
	}

	fclose(file);

	return true;
}

bool CMaterialPart::LoadData()
{
	if(!LoadMaterialData())
		return false;
	if(!LoadOrderData())
		return false;
	if(!LoadShipData())
		return false;
	return true;
}

bool CMaterialPart::SaveData()
{
	if(!SaveMaterialData())
		return false;
	if(!SaveOrderData())
		return false;
	if(!SaveShipData())
		return false;
	return true;
}
bool CMaterialPart::AddOrder() 
{
	COrder order;
	
	printf("<< 자재주문서 >>\n");				
	order.m_iOrderID = (int)m_orderList.size();
	printf("자재주문서ID : %d\n",order.m_iOrderID);
	printf("자재ID : ");								
	scanf("%d",&(order.m_iMaterialID));
	printf("자재주문량(KG) : ");
	scanf("%f",&(order.m_fOrderAmount));
	printf("자재주문회사 : ");
	scanf("%s",order.m_strCompany.data());
	printf("자재주문일(YYYYMMDD) : ");
	scanf("%d",order.m_dateOrderDay.data());
	printf("자재납기일(YYYYMMDD) : ");
	scanf("%d",order.m_dateDueDay.data());
	order.m_bChecked = 0;
	order.m_dateInputDay = "";

	m_orderList.push_back(order);

	return true;
}

bool CMaterialPart::ShowOrder(int _orderID)
{
	printf("<< 자재주문서 보기 >>\n");
	if((_orderID < 0) || (_orderID >= (int)m_orderList.size()))
	{
		printf("오류 : 잘못된 자재주문서ID입니다.\n");
		return false;
	}
	printf("자재주문서ID : %d\n",m_orderList[_orderID].m_iOrderID);
	printf("자재ID : %d\n",m_orderList[_orderID].m_iMaterialID);
	
	int materialID = m_orderList[_orderID].m_iMaterialID;
	printf("자재종류 : %s\n",m_materialList[materialID].m_strMaterialType.data());
	printf("주문자재량(KG) : %.2f(KG)\n",m_orderList[_orderID].m_fOrderAmount);

	printf("주문일 : %s\n",m_orderList[_orderID].m_dateOrderDay.data());
	printf("납기일 : %s\n",m_orderList[_orderID].m_dateDueDay.data());

	return true;
}

bool CMaterialPart::CheckOrder()
{
	printf("<< 자재주문서 승인 >>\n");
	int orderID;
	printf("승인할 자재주문서ID:");
	scanf_s("%d",&orderID);

	if(m_orderList[orderID].m_bChecked == true)
	{
		printf("오류 : 이미 승인된 자재주문서입니다.\n");
		return false;
	}
	if((orderID < 0)||(orderID >= (int)m_orderList.size()))
	{
		printf("오류 : 잘못된 ID값입니다.\n");
		return  false;
	}

	if(ShowOrder(orderID) == false)
		return false;
	if(Summit() == false)
		return false;

	printf("입력일(YYYYMMDD):");
	char inputDay[20];
	scanf("%s",inputDay);
	m_orderList[orderID].m_dateInputDay = inputDay;

	int materialID = m_orderList[orderID].m_iMaterialID;
	m_materialList[materialID].m_fStockAmount += m_orderList[orderID].m_fOrderAmount;
	printf("알림 : 자재량이 %.2로 증가했습니다.\n",m_materialList[materialID].m_fStockAmount);
	m_orderList[orderID].m_bChecked = true;
	
	return true;
}

bool CMaterialPart::AddMaterial() 
{
	CMaterial material;

	printf("<< 자재정보 추가 >>\n");
	material.m_iMaterialID = (int)m_materialList.size();
	printf("자재ID : %d\n",material.m_iMaterialID);
	
	char type[20];
	printf("자재종류 : ");
	scanf("%s",type);
	material.m_strMaterialType = type;

	printf("재고량(KG) : ");								
	scanf("%f",&(material.m_fStockAmount));

	printf("알림 : 자재ID: %d 자재종류 : %s 재고량 : %.2f(KG)이 추가되었습니다.\n",
		material.m_iMaterialID,material.m_strMaterialType.data(),material.m_fStockAmount);

	m_materialList.push_back(material);

	return true;
}

bool CMaterialPart::ModifyMaterial() 
{
	CMaterial material;
	int materialID;

	printf("<< 자재정보 수정 >>\n");
	printf("수정할자재ID: ");								
	scanf("%d",&materialID);
	material.m_iMaterialID = materialID;
	printf("자재종류 : ");
	char type[20];
	scanf("%s",type);
	material.m_strMaterialType = type;
	printf("재고량(KG) : ");								
	scanf("%f",&(material.m_fStockAmount));

	m_materialList[materialID] = material;

	return true;
}

bool CMaterialPart::ShowMaterial() 
{
	int materialID = 0;

	printf("<< 자재정보 수정 >>\n");
	printf("보고싶은 자재ID:");
	scanf_s("%d",&materialID);
	if((materialID < 0) || (materialID >= (int)m_materialList.size()))
	{
		printf("오류 : 잘못된 자재ID입니다.\n");
		return false;
	}

	printf("자재ID : %d\n",m_materialList[materialID].m_iMaterialID);
	printf("자재종류 : %s\n",m_materialList[materialID].m_strMaterialType.data());
	printf("재고량(KG) : %.2f(KG)\n",m_materialList[materialID].m_fStockAmount);

	return true;
}

void CMaterialPart::ShowMaterialAll() 
{
	printf("<< 자재정보 전체보기 >>\n");
	printf("자재ID\t자재종류\t재고량\n");
	for(int i = 0; i < (int)m_materialList.size(); i++)
	{
		printf("%3d\t",m_materialList[i].m_iMaterialID);
		printf("%s\t\t",m_materialList[i].m_strMaterialType.data());
		printf("%.2f\n",m_materialList[i].m_fStockAmount);
	}
}

void CMaterialPart::ShowOrderAll()
{
	printf("<< 자재주문서 전체보기 >>\n");
	printf("주문서ID 자재ID 종류\t자재량 주문회사\t주문일\t\t납기일\t입고여부\n");
	for(int i = 0; i < (int)m_orderList.size(); i++)
	{
		printf("%3d\t",m_orderList[i].m_iOrderID);
		printf("%3d\t",m_orderList[i].m_iMaterialID);
		int materialID = m_orderList[i].m_iMaterialID;
		printf("%s\t",m_materialList[materialID].m_strMaterialType.data());
		printf("%.2f\t",m_orderList[i].m_fOrderAmount);
		printf("%s\t",m_orderList[i].m_strCompany.data());
		printf("%s\t",m_orderList[i].m_dateOrderDay.data());
		printf("%s\t",m_orderList[i].m_dateDueDay.data());
		if(m_orderList[i].m_bChecked == true)
		{
			printf("예\t");
			//printf("%s\n",m_orderList[i].m_dateInputDay.data());
		}
		else
			printf("아니오\n");
	}
}
void CMaterialPart::ShowShipAll()
{
	printf("<< 출하지시서 전체보기 >>\n");
	printf("출하지시서ID\t자재ID\t출하량\t출하예정일\t출하여부\t입력일\n");
	for(int i = 0; i < (int)m_shipList.size(); i++)
	{
		printf("%3d\t\t",m_shipList[i].m_iShipID);
		printf("%3d\t",m_shipList[i].m_iMaterialID);
		printf("%.2f\t",m_shipList[i].m_fShipAmount);
		printf("%s\t",m_shipList[i].m_dateShipDay.data());
		if(m_shipList[i].m_bChecked == true)
			printf("예\t\t");
		else
			printf("아니오\t\t");
		printf("%s\n",m_shipList[i].m_dateInputDay.data());
	}
}
bool CMaterialPart::ShowShip(int _shipID)
{
	printf("<< 출하지시서 보기 >>\n");
	if((_shipID < 0) || (_shipID >= (int)m_shipList.size()))
	{
		printf("오류 : 잘못된 출하지시서ID입니다.\n");
		return false;
	}
	printf("출하지시서ID : %d\n",m_shipList[_shipID].m_iShipID);
	printf("자재ID : %d\n",m_shipList[_shipID].m_iMaterialID);
	int materialID = m_shipList[_shipID].m_iMaterialID;
	printf("자재종류 : %s\n",m_materialList[materialID].m_strMaterialType.data());
	printf("출하량 : %.2f\n",m_shipList[_shipID].m_fShipAmount);
	printf("출하예정일 : %s\n",m_shipList[_shipID].m_dateShipDay.data());
	printf("출하여부 : ");
	if(m_shipList[_shipID].m_bChecked == true)
	{
		printf("예\n");
		printf("입력일 : %s\n",m_shipList[_shipID].m_dateInputDay.data());
	}

	else
		printf("아니오\n");

	return true;
}

bool CMaterialPart::CheckShip() 
{
	printf("<< 출하지시서 승인 >>\n");

	int shipID;
	printf("승인할 출하지시서ID : ");
	scanf_s("%d",&shipID);
	if(m_shipList[shipID].m_bChecked == true)
	{
		printf("오류 : 이미 승인된 출하지시서입니다.\n");
		return false;
	}
	if((shipID < 0)||(shipID >= (int)m_shipList.size()))
		return  false;

	int materialID = m_shipList[shipID].m_iMaterialID;
	if( m_materialList[materialID].m_fStockAmount < m_shipList[shipID].m_fShipAmount)
	{
		printf("오류 : 출하량이 재고량보다 많습니다.\n");
		return false;
	}

	if(ShowShip(shipID) == false)
		return false;

	if(Summit() == false)
		return false;

	m_materialList[materialID].m_fStockAmount -= m_shipList[shipID].m_fShipAmount;
	printf("알림 : 재고량이 %.2f로 줄었습니다.\n",m_materialList[materialID].m_fStockAmount);

	m_shipList[shipID].m_bChecked = true;
	printf("입력일(YYYYMMDD) : ");
	char inputDay[20];
	scanf("%s",inputDay);
	m_shipList[shipID].m_dateInputDay = inputDay;

	return true;
}

bool CMaterialPart::Summit()
{
	printf("승인하겠습니까?(Y/N) : ");
	fflush(stdin);
	char input = getchar();
	if((input != 'Y') && (input != 'y'))
	{
		printf("알림 : 출하지시서 승인이 취소되었습니다.\n");
		return false;
	}

	return true;
}